#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
"""

import sys
import timer
import unittest

class Problem0002():
    def sum_even_fibonacci_numbers_under_n(self, n):
        first = second = 1
        even_sum = 0
        while first + second < n:
            internal_sum = first + second
            first = second
            second = internal_sum
            if internal_sum % 2 == 0:
                even_sum += internal_sum
        return even_sum

    def run(self):
        print 'The sum of all the even Fibonacci numbers under 4000000 '\
            'equals %i' % (self.sum_even_fibonacci_numbers_under_n(4000000))

class TestSumMultiples(unittest.TestCase):
    def setUp(self):
        self.problem_0002 = Problem0002()

    def test_sum_even_fibonacci_numbers_under_100(self):
        self.assertEqual(self.problem_0002.\
            sum_even_fibonacci_numbers_under_n(100), 44)

if __name__ == '__main__':
    if 'test' in sys.argv:
        sys.argv.remove('test')
        unittest.main()
    else:
        problem0002 = Problem0002()
        with timer.Timer() as problem_timer:
            problem0002.run()
